from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageCantBeDeleted
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config.config import TOKEN, admin_bot
from config.date_update import day_month_update
from keybord_markup.keyboard import kb_start, kb_back_start, kb_start_admin, kb_admin_action, keyboard_free_time
from display.time_display import display_time
from admin_panel.admin_set_day import start_print_day
from admin_panel.admin_delete_day import start_delete_day
from admin_panel.admin_move_chart import start_chart
from data.data_client import sql_start_users , sql_add_client, sql_make_appointment_status_record
from data.data_client import sql_add_continue_date, sql_add_back_date, sql_print_day, sql_make_appointment_time
from data.data_admin import sql_start_admin, sql_start_admin_viewing_week, sql_add_continue_week, sql_add_back_week
from data.form_record import start_time_choise
from data.data_form import sql_start_form

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

sql_start_users()
sql_start_admin()
sql_start_form()
sql_start_admin_viewing_week()

start_print_day(dp)
start_delete_day(dp)
start_chart(dp)

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    
    day, month = await day_month_update()
    
    fname = str(message.from_user.first_name)
    lname = str(message.from_user.last_name)
    uname = '@' + str(message.from_user.username)
    
    if message.chat.id in admin_bot:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Nail.crim", reply_markup=kb_start_admin)
        
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ Nail.crim", reply_markup=kb_start)
    
    await sql_add_client(message.chat.id, fname, lname, uname, day, month, "NO")
    
    await message.delete()
    
    
@dp.message_handler(text=["üìã –ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª—å üìã"])
async def admin_panel(message: types.Message):
    
    if message.chat.id in admin_bot:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...", reply_markup=kb_admin_action)
        
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")


@dp.message_handler(text=["‚¨áÔ∏è –ù–∞–∑–∞–¥ ‚¨áÔ∏è"])
async def start(message: types.Message):
    
    day, month = await day_month_update()
    
    if message.chat.id in admin_bot:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Nail.crim. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=kb_start_admin)
        
    else:
        await message.answer("–ó–∞–ø–∏—à–∏—Å—å –∫–æ –º–Ω–µ ü•∞", reply_markup=kb_start)
        
    await sql_add_client(message.chat.id, "", "", "", day, month, "NO")
    
    
@dp.message_handler(text=["üíÖüèª –ó–∞–ø–∏—Å–∞—Ç—å—Å—è üíÖüèª"])
async def note_time(message: types.Message):
    
    day, month = await day_month_update()
    
    await message.answer(text="–ì—Ä–∞—Ñ–∏–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ –∑–∞–ø–∏—Å—å", reply_markup=kb_back_start)
    
    await sql_add_client(message.chat.id, "", "", "", day, month, "NO")
    await display_time(message.chat.id, day, month)


@dp.message_handler()
async def del_text(message: types.Message):
    
    await message.delete()
  

@dp.callback_query_handler()
async def note_date_time(callback: types.CallbackQuery):
    
    try:
        
        if callback.data == str(1):
            await sql_add_continue_date(callback.message.chat.id)

            try:
                await bot.delete_message(callback.from_user.id, callback.message.message_id)

            except MessageToDeleteNotFound:
                print("message not found")

        elif callback.data == str(-1):
            await sql_add_back_date(callback.message.chat.id)

            try:
                await bot.delete_message(callback.from_user.id, callback.message.message_id)

            except MessageToDeleteNotFound:
                print("message not found")

        elif callback.data == "Click_day":
            day_p = await sql_print_day(callback.message.chat.id)

            await callback.answer(f"{day_p[1]:02}.{day_p[2]:02}")

        elif callback.data == "make_appointment_time":

            flag = await sql_make_appointment_time(callback.message.chat.id)
            if flag != []:
                await callback.answer(f"–ó–∞–ø–∏—Å—å –µ—Å—Ç—å!")
                await bot.send_message(callback.message.chat.id ,"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è", reply_markup=await keyboard_free_time(flag))

                await sql_make_appointment_status_record(callback.message.chat.id)
                await start_time_choise(dp)

            else:
                await callback.answer(f"–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç!")
        
    except MessageCantBeDeleted:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ callback –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ 48 —á–∞—Å–æ–≤!", "MessageCantBeDeleted")
            
    try:

        if callback.data == "Click_week":
            await callback.answer("–Ω–µ–¥–µ–ª—è")

        elif callback.data == "1–Ω–µ–¥":
            await sql_add_continue_week(callback.message.chat.id)

            try:
                await bot.delete_message(callback.from_user.id, callback.message.message_id)

            except MessageToDeleteNotFound:
                print("message not found")

        elif callback.data == "-1–Ω–µ–¥":
            await sql_add_back_week(callback.message.chat.id)

            try:
                await bot.delete_message(callback.from_user.id, callback.message.message_id)

            except MessageToDeleteNotFound:
                print("message not found")
    
    except MessageCantBeDeleted:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ callback –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –±–æ–ª—å—à–µ 48 —á–∞—Å–æ–≤!", "MessageCantBeDeleted")


if __name__ == "__main__":
    executor.start_polling(dp)